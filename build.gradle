plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'io.github.juuxel.loom-vineflower' version '1.11.0'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url = "https://jitpack.io" }
	maven { url = "https://maven.isxander.dev/releases" } // required for yacl
	maven { url = "https://oss.sonatype.org/content/repositories/snapshots" } // required for yacl for some reason
	maven { url = "https://maven.terraformersmc.com/releases" } // required for modmenu
	maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" } // required for oauth
	maven { url = "https://api.modrinth.com/maven" } // required for appleskin compat
	maven { url = "https://maven.quiltmc.org/repository/release" } // required for yacl for some reason
}

loom {
	runs {
		remove server
	}
}

dependencies {
	include(implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${mixinExtrasVersion}")))

	modImplementation("dev.isxander.yacl:yet-another-config-lib-fabric:${yaclVersion}")

	modImplementation("com.terraformersmc:modmenu:${project.modMenuVersion}")

	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// DevAuth. Lets us log in with our own Minecraft account. Useful for testing tab features.
	modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${project.devauthVersion}")

	// To test AppleSkin compatability. Remember to add ClothConfig to your run/mods https://modrinth.com/mod/cloth-config.
	//modImplementation("maven.modrinth:appleskin:${project.appleSkinVersion}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}